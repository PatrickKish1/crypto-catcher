/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "AbstractBlocklockReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractBlocklockReceiver__factory>;
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "IBlocklockReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlocklockReceiver__factory>;
    getContractFactory(
      name: "IBlocklockSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlocklockSender__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "ISubscription",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISubscription__factory>;
    getContractFactory(
      name: "BLS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BLS__factory>;
    getContractFactory(
      name: "CryptoCatcherBlocklock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CryptoCatcherBlocklock__factory>;
    getContractFactory(
      name: "CryptoCatcherRandomness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CryptoCatcherRandomness__factory>;
    getContractFactory(
      name: "EnhancedGameClaims",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnhancedGameClaims__factory>;
    getContractFactory(
      name: "GameClaims",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GameClaims__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockRandomnessReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRandomnessReceiver__factory>;
    getContractFactory(
      name: "UserManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserManager__factory>;
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IRandomnessReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandomnessReceiver__factory>;
    getContractFactory(
      name: "IRandomnessSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandomnessSender__factory>;
    getContractFactory(
      name: "ISubscription",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISubscription__factory>;
    getContractFactory(
      name: "BLS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BLS__factory>;
    getContractFactory(
      name: "RandomnessReceiverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RandomnessReceiverBase__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "AbstractBlocklockReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractBlocklockReceiver>;
    getContractAt(
      name: "ConfirmedOwner",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "IBlocklockReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlocklockReceiver>;
    getContractAt(
      name: "IBlocklockSender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlocklockSender>;
    getContractAt(
      name: "IOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "ISubscription",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISubscription>;
    getContractAt(
      name: "BLS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BLS>;
    getContractAt(
      name: "CryptoCatcherBlocklock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CryptoCatcherBlocklock>;
    getContractAt(
      name: "CryptoCatcherRandomness",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CryptoCatcherRandomness>;
    getContractAt(
      name: "EnhancedGameClaims",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnhancedGameClaims>;
    getContractAt(
      name: "GameClaims",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GameClaims>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockRandomnessReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRandomnessReceiver>;
    getContractAt(
      name: "UserManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UserManager>;
    getContractAt(
      name: "ConfirmedOwner",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "IOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IRandomnessReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandomnessReceiver>;
    getContractAt(
      name: "IRandomnessSender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandomnessSender>;
    getContractAt(
      name: "ISubscription",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISubscription>;
    getContractAt(
      name: "BLS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BLS>;
    getContractAt(
      name: "RandomnessReceiverBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RandomnessReceiverBase>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "AbstractBlocklockReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AbstractBlocklockReceiver>;
    deployContract(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfirmedOwner>;
    deployContract(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    deployContract(
      name: "IBlocklockReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBlocklockReceiver>;
    deployContract(
      name: "IBlocklockSender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBlocklockSender>;
    deployContract(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable>;
    deployContract(
      name: "ISubscription",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISubscription>;
    deployContract(
      name: "BLS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BLS>;
    deployContract(
      name: "CryptoCatcherBlocklock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CryptoCatcherBlocklock>;
    deployContract(
      name: "CryptoCatcherRandomness",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CryptoCatcherRandomness>;
    deployContract(
      name: "EnhancedGameClaims",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnhancedGameClaims>;
    deployContract(
      name: "GameClaims",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GameClaims>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockRandomnessReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockRandomnessReceiver>;
    deployContract(
      name: "UserManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UserManager>;
    deployContract(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfirmedOwner>;
    deployContract(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    deployContract(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable>;
    deployContract(
      name: "IRandomnessReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomnessReceiver>;
    deployContract(
      name: "IRandomnessSender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomnessSender>;
    deployContract(
      name: "ISubscription",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISubscription>;
    deployContract(
      name: "BLS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BLS>;
    deployContract(
      name: "RandomnessReceiverBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RandomnessReceiverBase>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "AbstractBlocklockReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AbstractBlocklockReceiver>;
    deployContract(
      name: "ConfirmedOwner",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfirmedOwner>;
    deployContract(
      name: "ConfirmedOwnerWithProposal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    deployContract(
      name: "IBlocklockReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBlocklockReceiver>;
    deployContract(
      name: "IBlocklockSender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBlocklockSender>;
    deployContract(
      name: "IOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable>;
    deployContract(
      name: "ISubscription",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISubscription>;
    deployContract(
      name: "BLS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BLS>;
    deployContract(
      name: "CryptoCatcherBlocklock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CryptoCatcherBlocklock>;
    deployContract(
      name: "CryptoCatcherRandomness",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CryptoCatcherRandomness>;
    deployContract(
      name: "EnhancedGameClaims",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnhancedGameClaims>;
    deployContract(
      name: "GameClaims",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GameClaims>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockRandomnessReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockRandomnessReceiver>;
    deployContract(
      name: "UserManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UserManager>;
    deployContract(
      name: "ConfirmedOwner",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfirmedOwner>;
    deployContract(
      name: "ConfirmedOwnerWithProposal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    deployContract(
      name: "IOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable>;
    deployContract(
      name: "IRandomnessReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomnessReceiver>;
    deployContract(
      name: "IRandomnessSender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomnessSender>;
    deployContract(
      name: "ISubscription",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISubscription>;
    deployContract(
      name: "BLS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BLS>;
    deployContract(
      name: "RandomnessReceiverBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RandomnessReceiverBase>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
