/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EnhancedGameClaims {
  export type ClaimRequestStruct = {
    player: AddressLike;
    points: BigNumberish;
    sessionId: BigNumberish;
    baseReward: BigNumberish;
    multiplier: BigNumberish;
    isSealed: boolean;
    isClaimed: boolean;
    timestamp: BigNumberish;
  };

  export type ClaimRequestStructOutput = [
    player: string,
    points: bigint,
    sessionId: bigint,
    baseReward: bigint,
    multiplier: bigint,
    isSealed: boolean,
    isClaimed: boolean,
    timestamp: bigint
  ] & {
    player: string;
    points: bigint;
    sessionId: bigint;
    baseReward: bigint;
    multiplier: bigint;
    isSealed: boolean;
    isClaimed: boolean;
    timestamp: bigint;
  };
}

export interface EnhancedGameClaimsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_RATE_DENOMINATOR"
      | "BASE_RATE_NUMERATOR"
      | "LEVEL_BONUS_PER_LEVEL"
      | "MAX_LEVEL_BONUS"
      | "SEALED_SESSION_BONUS"
      | "blocklockContract"
      | "calculateBaseReward"
      | "calculateFinalReward"
      | "calculateTotalMultiplier"
      | "claimRequests"
      | "claimRewards"
      | "claimSealedRewards"
      | "emergencyWithdraw"
      | "fundContract"
      | "getClaimRequest"
      | "getContractBalance"
      | "getPendingSealedClaims"
      | "getUserClaimHistory"
      | "isSealedClaimReady"
      | "nextClaimId"
      | "owner"
      | "processSealedClaim"
      | "renounceOwnership"
      | "totalClaimed"
      | "totalDistributed"
      | "transferOwnership"
      | "updateContracts"
      | "usdcToken"
      | "userClaimHistory"
      | "userManager"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimMade"
      | "OwnershipTransferred"
      | "SealedClaimPending"
      | "SealedClaimRevealed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_RATE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVEL_BONUS_PER_LEVEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LEVEL_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEALED_SESSION_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blocklockContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBaseReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFinalReward",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalMultiplier",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSealedRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingSealedClaims",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSealedClaimReady",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processSealedClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContracts",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userClaimHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_RATE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVEL_BONUS_PER_LEVEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LEVEL_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEALED_SESSION_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blocklockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBaseReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFinalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSealedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingSealedClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSealedClaimReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processSealedClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userClaimHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userManager",
    data: BytesLike
  ): Result;
}

export namespace ClaimMadeEvent {
  export type InputTuple = [
    user: AddressLike,
    claimId: BigNumberish,
    points: BigNumberish,
    baseAmount: BigNumberish,
    multiplier: BigNumberish,
    totalAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    claimId: bigint,
    points: bigint,
    baseAmount: bigint,
    multiplier: bigint,
    totalAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    claimId: bigint;
    points: bigint;
    baseAmount: bigint;
    multiplier: bigint;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SealedClaimPendingEvent {
  export type InputTuple = [
    user: AddressLike,
    claimId: BigNumberish,
    sessionId: BigNumberish
  ];
  export type OutputTuple = [user: string, claimId: bigint, sessionId: bigint];
  export interface OutputObject {
    user: string;
    claimId: bigint;
    sessionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SealedClaimRevealedEvent {
  export type InputTuple = [
    user: AddressLike,
    claimId: BigNumberish,
    revealedMultiplier: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    claimId: bigint,
    revealedMultiplier: bigint
  ];
  export interface OutputObject {
    user: string;
    claimId: bigint;
    revealedMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnhancedGameClaims extends BaseContract {
  connect(runner?: ContractRunner | null): EnhancedGameClaims;
  waitForDeployment(): Promise<this>;

  interface: EnhancedGameClaimsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_RATE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  BASE_RATE_NUMERATOR: TypedContractMethod<[], [bigint], "view">;

  LEVEL_BONUS_PER_LEVEL: TypedContractMethod<[], [bigint], "view">;

  MAX_LEVEL_BONUS: TypedContractMethod<[], [bigint], "view">;

  SEALED_SESSION_BONUS: TypedContractMethod<[], [bigint], "view">;

  blocklockContract: TypedContractMethod<[], [string], "view">;

  calculateBaseReward: TypedContractMethod<
    [points: BigNumberish],
    [bigint],
    "view"
  >;

  calculateFinalReward: TypedContractMethod<
    [
      player: AddressLike,
      points: BigNumberish,
      sessionMultiplier: BigNumberish,
      isSealed: boolean
    ],
    [
      [bigint, bigint, bigint] & {
        baseReward: bigint;
        totalMultiplier: bigint;
        finalReward: bigint;
      }
    ],
    "view"
  >;

  calculateTotalMultiplier: TypedContractMethod<
    [player: AddressLike, sessionMultiplier: BigNumberish, isSealed: boolean],
    [bigint],
    "view"
  >;

  claimRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean, boolean, bigint] & {
        player: string;
        points: bigint;
        sessionId: bigint;
        baseReward: bigint;
        multiplier: bigint;
        isSealed: boolean;
        isClaimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  claimRewards: TypedContractMethod<
    [
      points: BigNumberish,
      sessionId: BigNumberish,
      sessionMultiplier: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  claimSealedRewards: TypedContractMethod<
    [points: BigNumberish, sessionId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundContract: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getClaimRequest: TypedContractMethod<
    [claimId: BigNumberish],
    [EnhancedGameClaims.ClaimRequestStructOutput],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getPendingSealedClaims: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserClaimHistory: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  isSealedClaimReady: TypedContractMethod<
    [claimId: BigNumberish],
    [boolean],
    "view"
  >;

  nextClaimId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  processSealedClaim: TypedContractMethod<
    [claimId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalClaimed: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalDistributed: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateContracts: TypedContractMethod<
    [
      _usdcToken: AddressLike,
      _blocklockContract: AddressLike,
      _userManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  userClaimHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userManager: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_RATE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASE_RATE_NUMERATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LEVEL_BONUS_PER_LEVEL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LEVEL_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SEALED_SESSION_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blocklockContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateBaseReward"
  ): TypedContractMethod<[points: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateFinalReward"
  ): TypedContractMethod<
    [
      player: AddressLike,
      points: BigNumberish,
      sessionMultiplier: BigNumberish,
      isSealed: boolean
    ],
    [
      [bigint, bigint, bigint] & {
        baseReward: bigint;
        totalMultiplier: bigint;
        finalReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTotalMultiplier"
  ): TypedContractMethod<
    [player: AddressLike, sessionMultiplier: BigNumberish, isSealed: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean, boolean, bigint] & {
        player: string;
        points: bigint;
        sessionId: bigint;
        baseReward: bigint;
        multiplier: bigint;
        isSealed: boolean;
        isClaimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [
      points: BigNumberish,
      sessionId: BigNumberish,
      sessionMultiplier: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimSealedRewards"
  ): TypedContractMethod<
    [points: BigNumberish, sessionId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getClaimRequest"
  ): TypedContractMethod<
    [claimId: BigNumberish],
    [EnhancedGameClaims.ClaimRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingSealedClaims"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserClaimHistory"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isSealedClaimReady"
  ): TypedContractMethod<[claimId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextClaimId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processSealedClaim"
  ): TypedContractMethod<[claimId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateContracts"
  ): TypedContractMethod<
    [
      _usdcToken: AddressLike,
      _blocklockContract: AddressLike,
      _userManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userClaimHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userManager"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ClaimMade"
  ): TypedContractEvent<
    ClaimMadeEvent.InputTuple,
    ClaimMadeEvent.OutputTuple,
    ClaimMadeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SealedClaimPending"
  ): TypedContractEvent<
    SealedClaimPendingEvent.InputTuple,
    SealedClaimPendingEvent.OutputTuple,
    SealedClaimPendingEvent.OutputObject
  >;
  getEvent(
    key: "SealedClaimRevealed"
  ): TypedContractEvent<
    SealedClaimRevealedEvent.InputTuple,
    SealedClaimRevealedEvent.OutputTuple,
    SealedClaimRevealedEvent.OutputObject
  >;

  filters: {
    "ClaimMade(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ClaimMadeEvent.InputTuple,
      ClaimMadeEvent.OutputTuple,
      ClaimMadeEvent.OutputObject
    >;
    ClaimMade: TypedContractEvent<
      ClaimMadeEvent.InputTuple,
      ClaimMadeEvent.OutputTuple,
      ClaimMadeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SealedClaimPending(address,uint256,uint256)": TypedContractEvent<
      SealedClaimPendingEvent.InputTuple,
      SealedClaimPendingEvent.OutputTuple,
      SealedClaimPendingEvent.OutputObject
    >;
    SealedClaimPending: TypedContractEvent<
      SealedClaimPendingEvent.InputTuple,
      SealedClaimPendingEvent.OutputTuple,
      SealedClaimPendingEvent.OutputObject
    >;

    "SealedClaimRevealed(address,uint256,uint256)": TypedContractEvent<
      SealedClaimRevealedEvent.InputTuple,
      SealedClaimRevealedEvent.OutputTuple,
      SealedClaimRevealedEvent.OutputObject
    >;
    SealedClaimRevealed: TypedContractEvent<
      SealedClaimRevealedEvent.InputTuple,
      SealedClaimRevealedEvent.OutputTuple,
      SealedClaimRevealedEvent.OutputObject
    >;
  };
}
