/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace UserManager {
  export type AchievementStruct = {
    name: string;
    description: string;
    requirement: BigNumberish;
    xpReward: BigNumberish;
    isActive: boolean;
  };

  export type AchievementStructOutput = [
    name: string,
    description: string,
    requirement: bigint,
    xpReward: bigint,
    isActive: boolean
  ] & {
    name: string;
    description: string;
    requirement: bigint;
    xpReward: bigint;
    isActive: boolean;
  };

  export type LeaderboardEntryStruct = {
    player: AddressLike;
    username: string;
    score: BigNumberish;
    timestamp: BigNumberish;
  };

  export type LeaderboardEntryStructOutput = [
    player: string,
    username: string,
    score: bigint,
    timestamp: bigint
  ] & { player: string; username: string; score: bigint; timestamp: bigint };

  export type UserProfileStruct = {
    username: string;
    walletAddress: AddressLike;
    totalScore: BigNumberish;
    bestSingleScore: BigNumberish;
    gamesPlayed: BigNumberish;
    totalTokensCollected: BigNumberish;
    totalClaimsAmount: BigNumberish;
    registrationTime: BigNumberish;
    isActive: boolean;
    level: BigNumberish;
    experience: BigNumberish;
  };

  export type UserProfileStructOutput = [
    username: string,
    walletAddress: string,
    totalScore: bigint,
    bestSingleScore: bigint,
    gamesPlayed: bigint,
    totalTokensCollected: bigint,
    totalClaimsAmount: bigint,
    registrationTime: bigint,
    isActive: boolean,
    level: bigint,
    experience: bigint
  ] & {
    username: string;
    walletAddress: string;
    totalScore: bigint;
    bestSingleScore: bigint;
    gamesPlayed: bigint;
    totalTokensCollected: bigint;
    totalClaimsAmount: bigint;
    registrationTime: bigint;
    isActive: boolean;
    level: bigint;
    experience: bigint;
  };
}

export interface UserManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAY_IN_SECONDS"
      | "LEVEL_UP_BASE_XP"
      | "MAX_USERNAME_LENGTH"
      | "WEEK_IN_SECONDS"
      | "achievements"
      | "allTimeLeaderboard"
      | "createAchievement"
      | "dailyLeaderboard"
      | "deactivateAchievement"
      | "gameResults"
      | "getAchievement"
      | "getLeaderboard"
      | "getTopPlayers"
      | "getUserAchievements"
      | "getUserGameHistory"
      | "getUserProfile"
      | "hasAchievement"
      | "isRegistered"
      | "nextAchievementId"
      | "nextGameId"
      | "owner"
      | "recordGameResult"
      | "registerUser"
      | "renounceOwnership"
      | "totalUsers"
      | "transferOwnership"
      | "updateClaimsAmount"
      | "userAchievements"
      | "userAchievementsList"
      | "userGameHistory"
      | "userProfiles"
      | "usernameToAddress"
      | "weeklyLeaderboard"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AchievementUnlocked"
      | "GameResultRecorded"
      | "LeaderboardUpdated"
      | "LevelUp"
      | "OwnershipTransferred"
      | "UserRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DAY_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVEL_UP_BASE_XP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_USERNAME_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEK_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "achievements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allTimeLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAchievement",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAchievement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAchievement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAchievements",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserGameHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAchievement",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAchievementId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextGameId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordGameResult",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimsAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAchievements",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAchievementsList",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userGameHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usernameToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyLeaderboard",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAY_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVEL_UP_BASE_XP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_USERNAME_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEK_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "achievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTimeLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAchievement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAchievement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAchievement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserGameHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAchievement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAchievementId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextGameId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordGameResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAchievementsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userGameHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usernameToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyLeaderboard",
    data: BytesLike
  ): Result;
}

export namespace AchievementUnlockedEvent {
  export type InputTuple = [player: AddressLike, achievementId: BigNumberish];
  export type OutputTuple = [player: string, achievementId: bigint];
  export interface OutputObject {
    player: string;
    achievementId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResultRecordedEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    score: BigNumberish
  ];
  export type OutputTuple = [player: string, gameId: bigint, score: bigint];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaderboardUpdatedEvent {
  export type InputTuple = [
    player: AddressLike,
    leaderboardType: string,
    position: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    leaderboardType: string,
    position: bigint
  ];
  export interface OutputObject {
    player: string;
    leaderboardType: string;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelUpEvent {
  export type InputTuple = [player: AddressLike, newLevel: BigNumberish];
  export type OutputTuple = [player: string, newLevel: bigint];
  export interface OutputObject {
    player: string;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike, username: string];
  export type OutputTuple = [user: string, username: string];
  export interface OutputObject {
    user: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserManager extends BaseContract {
  connect(runner?: ContractRunner | null): UserManager;
  waitForDeployment(): Promise<this>;

  interface: UserManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAY_IN_SECONDS: TypedContractMethod<[], [bigint], "view">;

  LEVEL_UP_BASE_XP: TypedContractMethod<[], [bigint], "view">;

  MAX_USERNAME_LENGTH: TypedContractMethod<[], [bigint], "view">;

  WEEK_IN_SECONDS: TypedContractMethod<[], [bigint], "view">;

  achievements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        name: string;
        description: string;
        requirement: bigint;
        xpReward: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  allTimeLeaderboard: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player: string;
        username: string;
        score: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  createAchievement: TypedContractMethod<
    [
      name: string,
      description: string,
      requirement: BigNumberish,
      xpReward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  dailyLeaderboard: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player: string;
        username: string;
        score: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  deactivateAchievement: TypedContractMethod<
    [achievementId: BigNumberish],
    [void],
    "nonpayable"
  >;

  gameResults: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        player: string;
        score: bigint;
        tokensCollected: bigint;
        sessionId: bigint;
        multiplier: bigint;
        timestamp: bigint;
        isSealed: boolean;
      }
    ],
    "view"
  >;

  getAchievement: TypedContractMethod<
    [achievementId: BigNumberish],
    [UserManager.AchievementStructOutput],
    "view"
  >;

  getLeaderboard: TypedContractMethod<
    [leaderboardType: BigNumberish],
    [UserManager.LeaderboardEntryStructOutput[]],
    "view"
  >;

  getTopPlayers: TypedContractMethod<
    [],
    [UserManager.LeaderboardEntryStructOutput[]],
    "view"
  >;

  getUserAchievements: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserGameHistory: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserProfile: TypedContractMethod<
    [user: AddressLike],
    [UserManager.UserProfileStructOutput],
    "view"
  >;

  hasAchievement: TypedContractMethod<
    [user: AddressLike, achievementId: BigNumberish],
    [boolean],
    "view"
  >;

  isRegistered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  nextAchievementId: TypedContractMethod<[], [bigint], "view">;

  nextGameId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recordGameResult: TypedContractMethod<
    [
      player: AddressLike,
      score: BigNumberish,
      tokensCollected: BigNumberish,
      sessionId: BigNumberish,
      multiplier: BigNumberish,
      isSealed: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  registerUser: TypedContractMethod<[username: string], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateClaimsAmount: TypedContractMethod<
    [player: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userAchievements: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  userAchievementsList: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userGameHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        username: string;
        walletAddress: string;
        totalScore: bigint;
        bestSingleScore: bigint;
        gamesPlayed: bigint;
        totalTokensCollected: bigint;
        totalClaimsAmount: bigint;
        registrationTime: bigint;
        isActive: boolean;
        level: bigint;
        experience: bigint;
      }
    ],
    "view"
  >;

  usernameToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  weeklyLeaderboard: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player: string;
        username: string;
        score: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAY_IN_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LEVEL_UP_BASE_XP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_USERNAME_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEK_IN_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "achievements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        name: string;
        description: string;
        requirement: bigint;
        xpReward: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allTimeLeaderboard"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player: string;
        username: string;
        score: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAchievement"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      requirement: BigNumberish,
      xpReward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dailyLeaderboard"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player: string;
        username: string;
        score: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deactivateAchievement"
  ): TypedContractMethod<[achievementId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameResults"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        player: string;
        score: bigint;
        tokensCollected: bigint;
        sessionId: bigint;
        multiplier: bigint;
        timestamp: bigint;
        isSealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAchievement"
  ): TypedContractMethod<
    [achievementId: BigNumberish],
    [UserManager.AchievementStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [leaderboardType: BigNumberish],
    [UserManager.LeaderboardEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTopPlayers"
  ): TypedContractMethod<
    [],
    [UserManager.LeaderboardEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAchievements"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserGameHistory"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserProfile"
  ): TypedContractMethod<
    [user: AddressLike],
    [UserManager.UserProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAchievement"
  ): TypedContractMethod<
    [user: AddressLike, achievementId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextAchievementId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordGameResult"
  ): TypedContractMethod<
    [
      player: AddressLike,
      score: BigNumberish,
      tokensCollected: BigNumberish,
      sessionId: BigNumberish,
      multiplier: BigNumberish,
      isSealed: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[username: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateClaimsAmount"
  ): TypedContractMethod<
    [player: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userAchievements"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userAchievementsList"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userGameHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        username: string;
        walletAddress: string;
        totalScore: bigint;
        bestSingleScore: bigint;
        gamesPlayed: bigint;
        totalTokensCollected: bigint;
        totalClaimsAmount: bigint;
        registrationTime: bigint;
        isActive: boolean;
        level: bigint;
        experience: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "usernameToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "weeklyLeaderboard"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player: string;
        username: string;
        score: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AchievementUnlocked"
  ): TypedContractEvent<
    AchievementUnlockedEvent.InputTuple,
    AchievementUnlockedEvent.OutputTuple,
    AchievementUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "GameResultRecorded"
  ): TypedContractEvent<
    GameResultRecordedEvent.InputTuple,
    GameResultRecordedEvent.OutputTuple,
    GameResultRecordedEvent.OutputObject
  >;
  getEvent(
    key: "LeaderboardUpdated"
  ): TypedContractEvent<
    LeaderboardUpdatedEvent.InputTuple,
    LeaderboardUpdatedEvent.OutputTuple,
    LeaderboardUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LevelUp"
  ): TypedContractEvent<
    LevelUpEvent.InputTuple,
    LevelUpEvent.OutputTuple,
    LevelUpEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;

  filters: {
    "AchievementUnlocked(address,uint256)": TypedContractEvent<
      AchievementUnlockedEvent.InputTuple,
      AchievementUnlockedEvent.OutputTuple,
      AchievementUnlockedEvent.OutputObject
    >;
    AchievementUnlocked: TypedContractEvent<
      AchievementUnlockedEvent.InputTuple,
      AchievementUnlockedEvent.OutputTuple,
      AchievementUnlockedEvent.OutputObject
    >;

    "GameResultRecorded(address,uint256,uint256)": TypedContractEvent<
      GameResultRecordedEvent.InputTuple,
      GameResultRecordedEvent.OutputTuple,
      GameResultRecordedEvent.OutputObject
    >;
    GameResultRecorded: TypedContractEvent<
      GameResultRecordedEvent.InputTuple,
      GameResultRecordedEvent.OutputTuple,
      GameResultRecordedEvent.OutputObject
    >;

    "LeaderboardUpdated(address,string,uint256)": TypedContractEvent<
      LeaderboardUpdatedEvent.InputTuple,
      LeaderboardUpdatedEvent.OutputTuple,
      LeaderboardUpdatedEvent.OutputObject
    >;
    LeaderboardUpdated: TypedContractEvent<
      LeaderboardUpdatedEvent.InputTuple,
      LeaderboardUpdatedEvent.OutputTuple,
      LeaderboardUpdatedEvent.OutputObject
    >;

    "LevelUp(address,uint8)": TypedContractEvent<
      LevelUpEvent.InputTuple,
      LevelUpEvent.OutputTuple,
      LevelUpEvent.OutputObject
    >;
    LevelUp: TypedContractEvent<
      LevelUpEvent.InputTuple,
      LevelUpEvent.OutputTuple,
      LevelUpEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UserRegistered(address,string)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
  };
}
