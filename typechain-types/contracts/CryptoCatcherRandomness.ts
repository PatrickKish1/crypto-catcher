/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CryptoCatcherRandomness {
  export type GameSessionStruct = {
    player: AddressLike;
    requestId: BigNumberish;
    sessionSeed: BytesLike;
    entryFee: BigNumberish;
    startTime: BigNumberish;
    baseMultiplier: BigNumberish;
    levelChangeThresholds: BigNumberish[];
    levelDifficulties: BigNumberish[];
    isActive: boolean;
    seedReceived: boolean;
  };

  export type GameSessionStructOutput = [
    player: string,
    requestId: bigint,
    sessionSeed: string,
    entryFee: bigint,
    startTime: bigint,
    baseMultiplier: bigint,
    levelChangeThresholds: bigint[],
    levelDifficulties: bigint[],
    isActive: boolean,
    seedReceived: boolean
  ] & {
    player: string;
    requestId: bigint;
    sessionSeed: string;
    entryFee: bigint;
    startTime: bigint;
    baseMultiplier: bigint;
    levelChangeThresholds: bigint[];
    levelDifficulties: bigint[];
    isActive: boolean;
    seedReceived: boolean;
  };

  export type SessionConfigStruct = {
    entryFee: BigNumberish;
    baseMultiplier: BigNumberish;
    maxLevelChanges: BigNumberish;
  };

  export type SessionConfigStructOutput = [
    entryFee: bigint,
    baseMultiplier: bigint,
    maxLevelChanges: bigint
  ] & { entryFee: bigint; baseMultiplier: bigint; maxLevelChanges: bigint };
}

export interface CryptoCatcherRandomnessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "activePlayerSession"
      | "createGameSession"
      | "createSubscriptionAndFundNative"
      | "endSession"
      | "getActiveSession"
      | "getBalance"
      | "getSession"
      | "getSessionConfig"
      | "isInFlight"
      | "levelChangeRequests"
      | "nextSessionId"
      | "owner"
      | "pendingRequestExists"
      | "playerSessions"
      | "randomnessSender"
      | "receiveRandomness"
      | "requestLevelChange"
      | "sessionConfigs"
      | "sessions"
      | "setRandomnessSender"
      | "setSubId"
      | "shouldTriggerLevelChange"
      | "subscriptionId"
      | "topUpSubscriptionNative"
      | "transferOwnership"
      | "updateSubscription"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Funded"
      | "LevelChangeTriggered"
      | "NewSubscriptionId"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "Received"
      | "SessionCreated"
      | "SessionEnded"
      | "SessionSeedReceived"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activePlayerSession",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createGameSession",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscriptionAndFundNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endSession",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSession",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSession",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSessionConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInFlight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelChangeRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextSessionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerSessions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomnessSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRandomness",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLevelChange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sessionConfigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sessions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomnessSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldTriggerLevelChange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topUpSubscriptionNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscription",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePlayerSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGameSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscriptionAndFundNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSessionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInFlight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "levelChangeRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextSessionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerSessions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomnessSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestLevelChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sessions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRandomnessSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSubId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldTriggerLevelChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpSubscriptionNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscription",
    data: BytesLike
  ): Result;
}

export namespace FundedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelChangeTriggeredEvent {
  export type InputTuple = [
    sessionId: BigNumberish,
    player: AddressLike,
    score: BigNumberish,
    newLevel: BigNumberish
  ];
  export type OutputTuple = [
    sessionId: bigint,
    player: string,
    score: bigint,
    newLevel: bigint
  ];
  export interface OutputObject {
    sessionId: bigint;
    player: string;
    score: bigint;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSubscriptionIdEvent {
  export type InputTuple = [subscriptionId: BigNumberish];
  export type OutputTuple = [subscriptionId: bigint];
  export interface OutputObject {
    subscriptionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedEvent {
  export type InputTuple = [arg0: AddressLike, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionCreatedEvent {
  export type InputTuple = [
    sessionId: BigNumberish,
    player: AddressLike,
    sessionType: BigNumberish
  ];
  export type OutputTuple = [
    sessionId: bigint,
    player: string,
    sessionType: bigint
  ];
  export interface OutputObject {
    sessionId: bigint;
    player: string;
    sessionType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionEndedEvent {
  export type InputTuple = [
    sessionId: BigNumberish,
    player: AddressLike,
    finalScore: BigNumberish
  ];
  export type OutputTuple = [
    sessionId: bigint,
    player: string,
    finalScore: bigint
  ];
  export interface OutputObject {
    sessionId: bigint;
    player: string;
    finalScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionSeedReceivedEvent {
  export type InputTuple = [sessionId: BigNumberish, seed: BytesLike];
  export type OutputTuple = [sessionId: bigint, seed: string];
  export interface OutputObject {
    sessionId: bigint;
    seed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CryptoCatcherRandomness extends BaseContract {
  connect(runner?: ContractRunner | null): CryptoCatcherRandomness;
  waitForDeployment(): Promise<this>;

  interface: CryptoCatcherRandomnessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  activePlayerSession: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  createGameSession: TypedContractMethod<
    [sessionType: BigNumberish, callbackGasLimit: BigNumberish],
    [[bigint, bigint] & { sessionId: bigint; requestPrice: bigint }],
    "payable"
  >;

  createSubscriptionAndFundNative: TypedContractMethod<[], [void], "payable">;

  endSession: TypedContractMethod<
    [sessionId: BigNumberish, finalScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveSession: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getSession: TypedContractMethod<
    [sessionId: BigNumberish],
    [CryptoCatcherRandomness.GameSessionStructOutput],
    "view"
  >;

  getSessionConfig: TypedContractMethod<
    [sessionType: BigNumberish],
    [CryptoCatcherRandomness.SessionConfigStructOutput],
    "view"
  >;

  isInFlight: TypedContractMethod<[requestId: BigNumberish], [boolean], "view">;

  levelChangeRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        player: string;
        sessionId: bigint;
        currentScore: bigint;
        requestId: bigint;
        fulfilled: boolean;
      }
    ],
    "view"
  >;

  nextSessionId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRequestExists: TypedContractMethod<
    [subId: BigNumberish],
    [boolean],
    "view"
  >;

  playerSessions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  randomnessSender: TypedContractMethod<[], [string], "view">;

  receiveRandomness: TypedContractMethod<
    [requestID: BigNumberish, randomness: BytesLike],
    [void],
    "nonpayable"
  >;

  requestLevelChange: TypedContractMethod<
    [
      sessionId: BigNumberish,
      currentScore: BigNumberish,
      callbackGasLimit: BigNumberish
    ],
    [[bigint, bigint] & { requestId: bigint; requestPrice: bigint }],
    "payable"
  >;

  sessionConfigs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        entryFee: bigint;
        baseMultiplier: bigint;
        maxLevelChanges: bigint;
      }
    ],
    "view"
  >;

  sessions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, bigint, bigint, boolean, boolean] & {
        player: string;
        requestId: bigint;
        sessionSeed: string;
        entryFee: bigint;
        startTime: bigint;
        baseMultiplier: bigint;
        isActive: boolean;
        seedReceived: boolean;
      }
    ],
    "view"
  >;

  setRandomnessSender: TypedContractMethod<
    [_randomnessSender: AddressLike],
    [void],
    "nonpayable"
  >;

  setSubId: TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;

  shouldTriggerLevelChange: TypedContractMethod<
    [sessionId: BigNumberish, currentScore: BigNumberish],
    [[boolean, bigint]],
    "view"
  >;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  topUpSubscriptionNative: TypedContractMethod<[], [void], "payable">;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSubscription: TypedContractMethod<
    [consumers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activePlayerSession"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createGameSession"
  ): TypedContractMethod<
    [sessionType: BigNumberish, callbackGasLimit: BigNumberish],
    [[bigint, bigint] & { sessionId: bigint; requestPrice: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createSubscriptionAndFundNative"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "endSession"
  ): TypedContractMethod<
    [sessionId: BigNumberish, finalScore: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveSession"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSession"
  ): TypedContractMethod<
    [sessionId: BigNumberish],
    [CryptoCatcherRandomness.GameSessionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSessionConfig"
  ): TypedContractMethod<
    [sessionType: BigNumberish],
    [CryptoCatcherRandomness.SessionConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInFlight"
  ): TypedContractMethod<[requestId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "levelChangeRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        player: string;
        sessionId: bigint;
        currentScore: bigint;
        requestId: bigint;
        fulfilled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextSessionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRequestExists"
  ): TypedContractMethod<[subId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerSessions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "randomnessSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveRandomness"
  ): TypedContractMethod<
    [requestID: BigNumberish, randomness: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestLevelChange"
  ): TypedContractMethod<
    [
      sessionId: BigNumberish,
      currentScore: BigNumberish,
      callbackGasLimit: BigNumberish
    ],
    [[bigint, bigint] & { requestId: bigint; requestPrice: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sessionConfigs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        entryFee: bigint;
        baseMultiplier: bigint;
        maxLevelChanges: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sessions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, bigint, bigint, boolean, boolean] & {
        player: string;
        requestId: bigint;
        sessionSeed: string;
        entryFee: bigint;
        startTime: bigint;
        baseMultiplier: bigint;
        isActive: boolean;
        seedReceived: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRandomnessSender"
  ): TypedContractMethod<
    [_randomnessSender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubId"
  ): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shouldTriggerLevelChange"
  ): TypedContractMethod<
    [sessionId: BigNumberish, currentScore: BigNumberish],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "topUpSubscriptionNative"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSubscription"
  ): TypedContractMethod<[consumers: AddressLike[]], [void], "nonpayable">;

  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "LevelChangeTriggered"
  ): TypedContractEvent<
    LevelChangeTriggeredEvent.InputTuple,
    LevelChangeTriggeredEvent.OutputTuple,
    LevelChangeTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "NewSubscriptionId"
  ): TypedContractEvent<
    NewSubscriptionIdEvent.InputTuple,
    NewSubscriptionIdEvent.OutputTuple,
    NewSubscriptionIdEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "SessionCreated"
  ): TypedContractEvent<
    SessionCreatedEvent.InputTuple,
    SessionCreatedEvent.OutputTuple,
    SessionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SessionEnded"
  ): TypedContractEvent<
    SessionEndedEvent.InputTuple,
    SessionEndedEvent.OutputTuple,
    SessionEndedEvent.OutputObject
  >;
  getEvent(
    key: "SessionSeedReceived"
  ): TypedContractEvent<
    SessionSeedReceivedEvent.InputTuple,
    SessionSeedReceivedEvent.OutputTuple,
    SessionSeedReceivedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Funded(address,uint256)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "LevelChangeTriggered(uint256,address,uint256,uint256)": TypedContractEvent<
      LevelChangeTriggeredEvent.InputTuple,
      LevelChangeTriggeredEvent.OutputTuple,
      LevelChangeTriggeredEvent.OutputObject
    >;
    LevelChangeTriggered: TypedContractEvent<
      LevelChangeTriggeredEvent.InputTuple,
      LevelChangeTriggeredEvent.OutputTuple,
      LevelChangeTriggeredEvent.OutputObject
    >;

    "NewSubscriptionId(uint256)": TypedContractEvent<
      NewSubscriptionIdEvent.InputTuple,
      NewSubscriptionIdEvent.OutputTuple,
      NewSubscriptionIdEvent.OutputObject
    >;
    NewSubscriptionId: TypedContractEvent<
      NewSubscriptionIdEvent.InputTuple,
      NewSubscriptionIdEvent.OutputTuple,
      NewSubscriptionIdEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Received(address,uint256)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;

    "SessionCreated(uint256,address,uint8)": TypedContractEvent<
      SessionCreatedEvent.InputTuple,
      SessionCreatedEvent.OutputTuple,
      SessionCreatedEvent.OutputObject
    >;
    SessionCreated: TypedContractEvent<
      SessionCreatedEvent.InputTuple,
      SessionCreatedEvent.OutputTuple,
      SessionCreatedEvent.OutputObject
    >;

    "SessionEnded(uint256,address,uint256)": TypedContractEvent<
      SessionEndedEvent.InputTuple,
      SessionEndedEvent.OutputTuple,
      SessionEndedEvent.OutputObject
    >;
    SessionEnded: TypedContractEvent<
      SessionEndedEvent.InputTuple,
      SessionEndedEvent.OutputTuple,
      SessionEndedEvent.OutputObject
    >;

    "SessionSeedReceived(uint256,bytes32)": TypedContractEvent<
      SessionSeedReceivedEvent.InputTuple,
      SessionSeedReceivedEvent.OutputTuple,
      SessionSeedReceivedEvent.OutputObject
    >;
    SessionSeedReceived: TypedContractEvent<
      SessionSeedReceivedEvent.InputTuple,
      SessionSeedReceivedEvent.OutputTuple,
      SessionSeedReceivedEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
